generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  brand       String
  price       Decimal  @db.Decimal(10, 2)
  description String?  @db.Text
  features    Json // Stores product features as JSON
  stock       Int      @default(0)
  imageUrl    String?
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  interactions ProductInteraction[]
  popularity   Float              @default(0)
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?   @db.Text
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model ChatMessage {
  id        String   @id @default(cuid())
  role      String // 'user' or 'assistant'
  content   String   @db.Text
  userId    String? // Optional: link to user if authenticated
  user      User?    @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id          String        @id @default(cuid())
  email       String        @unique
  name        String?
  password    String
  role        UserRole      @default(USER)
  preferences Json? // Will store structured preference data with priceRange: { min: float, max: float }
  chatHistory ChatMessage[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Auth and verification
  emailVerified     DateTime?
  verificationToken String?   @unique
  resetToken        String?   @unique
  resetTokenExpiry  DateTime?
  Session           Session[]
  productInteractions ProductInteraction[]
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model MetricLog {
  id        String   @id @default(cuid())
  metric    String // e.g., 'stock_level', 'sales', 'chat_interactions'
  value     Float
  timestamp DateTime @default(now())
}

model ProductInteraction {
  id        String   @id @default(cuid())
  userId    String
  productId String
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  type      String   // 'view', 'purchase', 'wishlist'
  timestamp DateTime @default(now())

  @@index([userId])
  @@index([productId])
}
